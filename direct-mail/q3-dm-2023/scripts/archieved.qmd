---
title: "archieved"
format: html
editor: visual
---

```{r}
data_dm |> 
  group_by(fill_info) |> 
  summarise(across(page_view:click, ~sum(.)), .groups = "drop") |> 
  pivot_longer(cols = 2:15, names_to ="Action", values_to = "Counts")


data_dm |> 
  group_by(fill_info) |> 
  summarise(across(page_view:click, ~sum(.)), .groups = "drop") |> 
  mutate(total = sum(c_across(page_view:click))) |> 
  adorn_totals("row") |> 
  as_tibble() -> x
# |> 
#   kable() |> 
#   kable_styling()
```

```{r}

library(tidyverse)
library(kableExtra)
library(janitor)

final_final_data = read_csv("final_data/final_final_final.csv") |> 
  mutate(fill_info_num = ifelse(fill_info == "Filled", 1, 0),
         Year_Established = as.character(Year_Established))

model <- glm(fill_info_num ~ State+ Contact_Title+ Year_Established + Employee_Size + New_Category, data = final_final_data, family = binomial)
summary(model) 


map_dbl(final_final_data, ~ sum(is.na(.)))


values_count <- sapply(lapply(final_final_data, unique), length)  # Identify variables with 1 value
glm(fill_info_num ~ ., final_final_data[ , values_count > 1], family = binomial)                  # Apply lm() to subset of data

```
```{r}
sapply(final_final_data, class)
unique_values <- sapply(final_final_data[c( "fill_info","State","Contact_Title","Country","Campaign_Name","New_Category")], function(x) length(unique(x))) 
 
# Check data types of all columns
data_types <- sapply(final_final_data, class)

# Identify categorical columns
categorical_columns <- names(data_types[data_types %in% c("factor", "character")])

# Check unique values in categorical columns
unique_values <- sapply(final_final_data[categorical_columns], function(x) length(unique(x)))

# Identify columns with only one unique value
problematic_columns <- categorical_columns[unique_values <= 1]

# Print the names of problematic columns
cat("Columns causing the issue:", paste(problematic_columns, collapse = ", "))

```


```{r}
library(tidyverse)
library(kableExtra)
library(janitor)
```


```{r}
final_final = read_csv("final_data/final_final_final.csv") |> 
  mutate(fill_info_num = ifelse(fill_info == "Filled", 1, 0)) 

model <- glm(fill_info_num ~ State+ Contact_Title+ Year_Established + Employee_Size+ Country + New_Category, data = final_final, family = binomial)
summary(model) 
```

```{r}
str(data_dm)
```


```{r}

data_dm = read_csv("final_data/final_final_final.csv")
data_dm$Year_Established <- as.numeric(data_dm$Year_Established)
data_dm$fill_info <- factor(data_dm$fill_info, levels = c("Didn't Fill", "Filled"))
set.seed(123)  # For reproducibility
sample_size <- floor(0.7 * nrow(data_dm))
train_data <- sample(1:nrow(data_dm), size = sample_size)
train_set <- data_dm[train_data, ]
test_set <- data_dm[-train_data, ]
model <- glm(fill_info ~ ., data = train_set, family = "binomial")
predictions <- predict(model, newdata = test_set, type = "response")

```


```{r}
library(pROC)  # For ROC curve and AUC

# Calculate probabilities for positive class (Filled)
auc_obj <- roc(test_set$fill_info, predictions)

# Calculate AUC (Area Under the Curve)
auc_value <- auc(auc_obj)

# Calculate accuracy
threshold <- 0.5  # Adjust this threshold as needed
predicted_class <- ifelse(predictions > threshold, "Filled", "Didn't Fill")
accuracy <- mean(predicted_class == test_set$fill_info)

# Create a confusion matrix
confusion_matrix <- table(Actual = test_set$fill_info, Predicted = predicted_class)

# Print the evaluation metrics
print(confusion_matrix)
print(paste("Accuracy:", round(accuracy * 100, 2), "%"))
print(paste("AUC:", round(auc_value, 2)))

```


```{r}
data_dm = read_csv("DATA.csv")
data_dm$Year_Established <- as.numeric(data_dm$Year_Established)
set.seed(123)  # For reproducibility
sample_size <- floor(0.7 * nrow(data_dm))
train_data <- sample(1:nrow(data_dm), size = sample_size)
train_set <- data_dm[train_data, ]
test_set <- data_dm[-train_data, ]
model <- glm(fill_info ~ ., data = train_set, family = "binomial")
predictions <- predict(model, newdata = test_set, type = "response")

map_dbl(data_dm, ~sum(n_distinct(.)))
```

```{r}
sapply(data_dm, class)
unique_values <- sapply(data_dm["fill_info","State","Contact_Title","Country","Campaign_Name","New_Category"], function(x) length(unique(x)))

# Check data types of all columns
data_types <- sapply(data_dm, class)

# Identify categorical columns
categorical_columns <- names(data_types[data_types %in% c("factor", "character")])

# Check unique values in categorical columns
unique_values <- sapply(data_dm[categorical_columns], function(x) length(unique(x)))

# Identify columns with only one unique value
problematic_columns <- categorical_columns[unique_values <= 1]

# Print the names of problematic columns
cat("Columns causing the issue:", paste(problematic_columns, collapse = ", "))

```

