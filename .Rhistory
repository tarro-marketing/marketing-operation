)
email <- keyring::key_get(service = "googlesheets4", username = "email")
# configure and authenticate using retrieved credentials
gs4_auth_configure(path = client_secret_path)
gs4_auth(email = email, cache = TRUE)
folder_path <- here("2024", "august-formfill-2024","aug1tosep11")
install.packages("here")
library(tidyverse)
library(salesforcer)
library(yaml)
library(httr)
library(googlesheets4)
library(keyring)
client_secret_path <- keyring::key_get(
service = "googlesheets4",
username = "client_secret_path" # path to google developer credential
)
email <- keyring::key_get(service = "googlesheets4", username = "email")
# configure and authenticate using retrieved credentials
gs4_auth_configure(path = client_secret_path)
gs4_auth(email = email, cache = TRUE)
folder_path <- here("2024", "august-formfill-2024","aug1tosep11")
library(tidyverse)
library(salesforcer)
library(yaml)
library(httr)
library(googlesheets4)
library(keyring)
library(here)
client_secret_path <- keyring::key_get(
service = "googlesheets4",
username = "client_secret_path" # path to google developer credential
)
email <- keyring::key_get(service = "googlesheets4", username = "email")
# configure and authenticate using retrieved credentials
gs4_auth_configure(path = client_secret_path)
gs4_auth(email = email, cache = TRUE)
folder_path <- here("2024", "august-formfill-2024","aug1tosep11")
filenames <- list.files(folder_path, pattern = "\\.csv$", full.names = TRUE)
col_types <- cols(
`手机号码` = col_character(),
`Mobile Number` = col_character(),
.default = col_guess()  # This will guess other column types
)
# Read and combine the files with consistent column types
combo_data <- purrr::map_df(filenames,
~read_csv(.x, col_types = col_types) |>
mutate(filename = .x))
combo_data_clean <- combo_data  |>
mutate(
name = coalesce(`姓氏`, `Last Name`),
phone_number = coalesce(`手机号码`, `Mobile Number`),
state = coalesce(`州`, `State`),
cuisine_type = coalesce(`餐馆菜系`, `Cuisine Type`)
)  |>
rename("email"=`您的邮箱地址`) |>
select(-c(`手机号码`, `Mobile Number`, `州`, `State`, `餐馆菜系`, `Cuisine Type`,`姓氏`, `Last Name`)) |>
select(where(~ !all(is.na(.)))) |>
filter(!str_detect(name, "(?i)marketing|test"))
library(tidyverse)
library(salesforcer)
library(yaml)
library(httr)
library(googlesheets4)
library(keyring)
library(here)
client_secret_path <- keyring::key_get(
service = "googlesheets4",
username = "client_secret_path" # path to google developer credential
)
email <- keyring::key_get(service = "googlesheets4", username = "email")
# configure and authenticate using retrieved credentials
gs4_auth_configure(path = client_secret_path)
gs4_auth(email = email, cache = TRUE)
folder_path <- here("2024", "august-formfill-2024","aug1tosep11")
filenames <- list.files(folder_path, pattern = "\\.csv$", full.names = TRUE)
col_types <- cols(
`手机号码` = col_character(),
`Mobile Number` = col_character(),
.default = col_guess() # This will guess other column types
)
# Read and combine the files with consistent column types
combo_data <- purrr::map_df(
filenames,
~ read_csv(.x, col_types = col_types) |>
mutate(filename = .x)
)
# Function to select the first non-missing column among multiple options
select_first_existing_column <- function(df, columns) {
existing_col <- columns[columns %in% colnames(df)]
if (length(existing_col) > 0) {
return(df[[existing_col[1]]])
} else {
return(NA)
}
}
combo_data_clean <- combo_data |>
mutate(
name = select_first_existing_column(combo_data, c("姓氏", "Last Name")),
phone_number = select_first_existing_column(
combo_data, c("手机号码", "Mobile Number")
),
state = select_first_existing_column(combo_data, c("州", "State")),
cuisine_type = select_first_existing_column(
combo_data, c("餐馆菜系", "Cuisine Type")
),
email = select_first_existing_column(
combo_data, c("您的邮箱地址", "Email Address")
) # nolint # nolint
) |>
select(-any_of(c(
"手机号码", "Mobile Number", "州",
"State", "餐馆菜系", "Cuisine Type",
"姓氏", "Last Name", "您的邮箱地址", "Email Address"
))) |>
select(where(~ !all(is.na(.)))) |>
filter(!str_detect(name, "(?i)marketing|test")) |>
clean_names()
library(tidyverse)
library(salesforcer)
library(yaml)
library(httr)
library(googlesheets4)
library(keyring)
library(here)
library(janitor)
client_secret_path <- keyring::key_get(
service = "googlesheets4",
username = "client_secret_path" # path to google developer credential
)
email <- keyring::key_get(service = "googlesheets4", username = "email")
# configure and authenticate using retrieved credentials
gs4_auth_configure(path = client_secret_path)
gs4_auth(email = email, cache = TRUE)
folder_path <- here("2024", "august-formfill-2024","aug1tosep11")
filenames <- list.files(folder_path, pattern = "\\.csv$", full.names = TRUE)
col_types <- cols(
`手机号码` = col_character(),
`Mobile Number` = col_character(),
.default = col_guess() # This will guess other column types
)
# Read and combine the files with consistent column types
combo_data <- purrr::map_df(
filenames,
~ read_csv(.x, col_types = col_types) |>
mutate(filename = .x)
)
# Function to select the first non-missing column among multiple options
select_first_existing_column <- function(df, columns) {
existing_col <- columns[columns %in% colnames(df)]
if (length(existing_col) > 0) {
return(df[[existing_col[1]]])
} else {
return(NA)
}
}
combo_data_clean <- combo_data |>
mutate(
name = select_first_existing_column(combo_data, c("姓氏", "Last Name")),
phone_number = select_first_existing_column(
combo_data, c("手机号码", "Mobile Number")
),
state = select_first_existing_column(combo_data, c("州", "State")),
cuisine_type = select_first_existing_column(
combo_data, c("餐馆菜系", "Cuisine Type")
),
email = select_first_existing_column(
combo_data, c("您的邮箱地址", "Email Address")
) # nolint # nolint
) |>
select(-any_of(c(
"手机号码", "Mobile Number", "州",
"State", "餐馆菜系", "Cuisine Type",
"姓氏", "Last Name", "您的邮箱地址", "Email Address"
))) |>
select(where(~ !all(is.na(.)))) |>
filter(!str_detect(name, "(?i)marketing|test")) |>
clean_names()
library(tidyverse)
library(salesforcer)
library(yaml)
library(httr)
library(googlesheets4)
library(keyring)
library(here)
library(janitor)
client_secret_path <- keyring::key_get(
service = "googlesheets4",
username = "client_secret_path" # path to google developer credential
)
email <- keyring::key_get(service = "googlesheets4", username = "email")
# configure and authenticate using retrieved credentials
gs4_auth_configure(path = client_secret_path)
gs4_auth(email = email, cache = TRUE)
folder_path <- here("2024", "august-formfill-2024","aug1tosep11")
filenames <- list.files(folder_path, pattern = "\\.csv$", full.names = TRUE)
col_types <- cols(
`手机号码` = col_character(),
`Mobile Number` = col_character(),
.default = col_guess() # This will guess other column types
)
# Read and combine the files with consistent column types
combo_data <- purrr::map_df(
filenames,
~ read_csv(.x, col_types = col_types) |>
mutate(filename = .x)
)
combo_data_clean <- combo_data |>
mutate(
name = select_first_existing_column(combo_data, c("姓氏", "Last Name")),
phone_number = select_first_existing_column(
combo_data, c("手机号码", "Mobile Number")
),
state = select_first_existing_column(combo_data, c("州", "State")),
cuisine_type = select_first_existing_column(
combo_data, c("餐馆菜系", "Cuisine Type")
),
email = select_first_existing_column(
combo_data, c("您的邮箱地址", "Email Address")
) # nolint # nolint
) |>
select(-any_of(c(
"手机号码", "Mobile Number", "州",
"State", "餐馆菜系", "Cuisine Type",
"姓氏", "Last Name", "您的邮箱地址", "Email Address"
)))
View(combo_data_clean)
folder_path <- here("2024", "august-formfill-2024","aug1tosep11")
filenames <- list.files(folder_path, pattern = "\\.csv$", full.names = TRUE)
folder_path <- here("form-fill", "august-formfill-2024","aug1tosep11")
filenames <- list.files(folder_path, pattern = "\\.csv$", full.names = TRUE)
col_types <- cols(
`手机号码` = col_character(),
`Mobile Number` = col_character(),
.default = col_guess() # This will guess other column types
)
# Read and combine the files with consistent column types
combo_data <- purrr::map_df(
filenames,
~ read_csv(.x, col_types = col_types) |>
mutate(filename = .x)
)
# Function to select the first non-missing column among multiple options
select_first_existing_column <- function(df, columns) {
existing_col <- columns[columns %in% colnames(df)]
if (length(existing_col) > 0) {
return(df[[existing_col[1]]])
} else {
return(NA)
}
}
combo_data_clean <- combo_data |>
mutate(
name = select_first_existing_column(combo_data, c("姓氏", "Last Name")),
phone_number = select_first_existing_column(
combo_data, c("手机号码", "Mobile Number")
),
state = select_first_existing_column(combo_data, c("州", "State")),
cuisine_type = select_first_existing_column(
combo_data, c("餐馆菜系", "Cuisine Type")
),
email = select_first_existing_column(
combo_data, c("您的邮箱地址", "Email Address")
) # nolint # nolint
) |>
select(-any_of(c(
"手机号码", "Mobile Number", "州",
"State", "餐馆菜系", "Cuisine Type",
"姓氏", "Last Name", "您的邮箱地址", "Email Address"
))) |>
select(where(~ !all(is.na(.)))) |>
filter(!str_detect(name, "(?i)marketing|test")) |>
clean_names()
colnames(combo_data_clean)
combo_data_ordered <- combo_data_clean %>%
select(name, phone_number, resturantname, state, everything())
combo_data2 <- combo_data_ordered |>
mutate(phone_number = str_replace_all(phone_number, "-", "") |>
str_replace_all("[^0-9]", "")) |>
mutate(
channel = case_when(
str_detect(filename, "(?i)SEM|Blog Pages Contact us") |
str_detect(utm_source, "(?i)google") ~ "SEM",
str_detect(filename, "(?i)SEO|Contact us") ~ "SEO",
str_detect(filename, "(?i)SMS") ~ "SMS",
str_detect(filename, "(?i)Brizo|(?i)DM") |
str_detect(utm_medium, "(?i)DirectMail") ~ "DM",
str_detect(filename, "(?i)complete|(?i)guide") |
str_detect(utm_medium, "(?i)complete-guide") ~ "Complete Guide"
)
) |>
select(channel, everything()) |>
rename(created_date = created_at) |>
mutate(
created_date = as_date(created_date),
week_start = floor_date(created_date,
"week",
week_start = 1
), # Start of the week (Monday)
week_end = ceiling_date(created_date,
"week",
week_start = 1
) - 1, # End of the week (Sunday)
week = paste(
format(week_start, "%m/%d"), "-",
format(week_end, "%m/%d")
) # Format as MM/DD-MM/DD
) |>
select(-week_start, -week_end) |>
select(week, channel, everything())
summary_table <- combo_data2 |>
group_by(channel) |>
summarize(form_fill_numbers = n()) |>
arrange(desc(form_fill_numbers))
sheet_write(combo_data2,
ss = "18y8li4QmbStR-6XFc-Vx8o9qzTDJrGIExAObVzG8RpE",
sheet = "August"
)
source("~/marketing-operation/direct-mail/overall-data/marketing_dm_leads_from_sfdc.R", echo=TRUE)
source("~/marketing-operation/direct-mail/overall-data/marketing_dm_leads_from_sfdc.R", echo=TRUE)
View(dm_lead)
source("~/marketing-operation/direct-mail/overall-data/marketing_dm_leads_from_sfdc.R", echo=TRUE)
DM_Lead <- final_campaign_sfdc_lead |>
filter(Lead_Channel_SFDC %in% "DM")
write_sheet(DM_Lead,
ss = "18viPByX4RQQx6D7PBC7COCnZwQSPB5bEjPBxLEDx8gU",
sheet = "Lead Data (+Campaign)"
)
rm(list = setdiff(ls(), c("DM_Lead")))
View(DM_Lead)
library(tidyverse)
library(salesforcer)
library(yaml)
library(httr)
library(googlesheets4)
library(keyring)
client_secret_path <- keyring::key_get(
service = "googlesheets4",
username = "client_secret_path"
)
email <- keyring::key_get(service = "googlesheets4", username = "email")
# configure and authenticate using retrieved credentials
gs4_auth_configure(path = client_secret_path)
gs4_auth(email = email, cache = TRUE)
################### loading data ###########################
contact_campaign_report <-
read_sheet(
ss = "1xy2bw5ckuUod-5In2iZZuWxuIxvMqzI-fF_jODddGVg",
sheet = "[all time] mkt campaign report",
range = "A:AH"
)
dm_lead <-
read_sheet(
ss = "1xy2bw5ckuUod-5In2iZZuWxuIxvMqzI-fF_jODddGVg",
sheet = "[all time] Marketing MEL/MQL Report",
range = "A:AK"
)
campaign_lead_report <-
read_sheet(
ss = "1xy2bw5ckuUod-5In2iZZuWxuIxvMqzI-fF_jODddGVg",
sheet = "[all time] Campaign Lead Report",
range = "A:AC"
)
dm_lead <- dm_lead |>
mutate(`Mobile - Primary` = str_replace_all(`Mobile - Primary`, "[^\\d]", "")) |>
rename_with(~ str_replace_all(., "[:punct:]", "")) |>
rename_with(~ str_replace_all(., " ", "_")) |>
rename_with(~ paste0(., "_SFDC")) |>
mutate(
across(where(is.character), ~ recode(., "-" = NA_character_)),
across(where(is.character), ~ if_else(. == "", NA_character_, .)),
Business_Phone_SFDC = str_replace_all(
str_replace_all(Business_Phone_SFDC, "-", ""),
"[^0-9]", ""
),
flow = case_when(
Created_By_SFDC %in% c(
"JotForm Integration User",
"Carlito Academia"
) ~ "webflow",
TRUE ~ "inbound call"
),
types = case_when(
Created_By_SFDC == "JotForm Integration User" ~ "jotform",
Created_By_SFDC == "Carlito Academia" ~ "qr scan",
TRUE ~ "inbound call"
),
Onboarded = case_when(Stage_SFDC == "Onboarded" ~ TRUE, TRUE ~ FALSE),
CW = case_when(Stage_SFDC == "Closed Won" ~ TRUE, TRUE ~ FALSE),
SQL = case_when(
CW == TRUE ~ TRUE, Opportunity_ID_SFDC != "" ~ TRUE,
TRUE ~ FALSE
),
MQL = case_when(
SQL == TRUE ~ TRUE, CW == TRUE ~ TRUE, Menu_Type_SFDC != "" &
StateProvince_text_only_SFDC != "" &
(Created_By_SFDC == "JotForm Integration User" |
Lead_Status_SFDC %in% c("Converted", "AE Assigned")
) & !(Unqualified_Reason_SFDC %in% c(
"Current Client",
"Duplicate",
"Not a Restaurant"
)) ~ TRUE,
TRUE ~ FALSE
),
MEL = case_when(
!(Unqualified_Reason_SFDC %in% c("Current Client", "Duplicate")) ~ TRUE,
TRUE ~ FALSE
)
)
View(dm_lead)
campaign_lead_report2 <- campaign_lead_report |>
mutate(`Mobile - Primary` = str_replace_all(`Mobile - Primary`, "[^\\d]", "")) |>
rename_with(~ str_replace_all(., "[:punct:]", "")) |>
rename_with(~ str_replace_all(., " ", "_")) |>
rename_with(~ paste0(., "_Campaign_Lead")) |>
mutate(
across(where(is.character), ~ recode(., "-" = NA_character_)),
across(where(is.character), ~ if_else(. == "", NA_character_, .))
)
contact_campaign_report2 <- contact_campaign_report |>
mutate(`Contact: Mobile - Primary` = as.character(`Contact: Mobile - Primary`)) |>
mutate(`Contact: Mobile - Primary` = str_replace_all(`Contact: Mobile - Primary`, "[^\\d]", "")) |>
rename_with(~ str_replace_all(., "[:punct:]", "")) |>
rename_with(~ str_replace_all(., " ", "_")) |>
rename_with(~ paste0(., "_Contact_Report")) |>
mutate(
across(where(is.character), ~ recode(., "-" = NA_character_)),
across(where(is.character), ~ if_else(. == "", NA_character_, .))
) |>
mutate(Lead_Mobile__Primary_Contact_Report = as.character(Lead_Mobile__Primary_Contact_Report))
View(campaign_lead_report2)
View(contact_campaign_report2)
campaign_lead_report_join <- campaign_lead_report2 |>
select(
Latest_Campaign_Campaign_Lead,
Mobile__Primary_Campaign_Lead,
Lead_ID_Campaign_Lead
) |>
distinct(Lead_ID_Campaign_Lead, .keep_all = TRUE)
contact_report_join <- contact_campaign_report2 |>
select(
Campaign_Name_Contact_Report,
Lead_Mobile__Primary_Contact_Report,
Lead_Converted_Account_Account_ID_Contact_Report
) |>
distinct(Lead_Converted_Account_Account_ID_Contact_Report, .keep_all = TRUE)
no_latest_campaign <- dm_lead |>
filter(is.na(Latest_Campaign_SFDC)) |>
left_join(campaign_lead_report_join, by = c(
"Lead_ID_SFDC" = "Lead_ID_Campaign_Lead",
"Mobile__Primary_SFDC" = "Mobile__Primary_Campaign_Lead"
)) |>
left_join(contact_report_join,
by = c(
"Account_ID_SFDC" = "Lead_Converted_Account_Account_ID_Contact_Report",
"Mobile__Primary_SFDC" = "Lead_Mobile__Primary_Contact_Report"
)
) |>
mutate(
campaign_name =
coalesce(
Latest_Campaign_SFDC,
Latest_Campaign_Campaign_Lead,
Campaign_Name_Contact_Report
)
)
has_latest_campaign <- dm_lead |>
filter(Latest_Campaign_SFDC != "-") |>
mutate(
Campaign_Name_Contact_Report = "",
Latest_Campaign_Campaign_Lead = "",
campaign_name = Latest_Campaign_SFDC
)
final_campaign_sfdc_lead <- rbind(no_latest_campaign, has_latest_campaign)
final_campaign_sfdc_lead <- final_campaign_sfdc_lead |>
select(
flow, types, MEL, MQL, SQL, CW, Onboarded, campaign_name,
Latest_Campaign_SFDC, Latest_Campaign_Campaign_Lead,
Campaign_Name_Contact_Report, StateProvince_text_only_SFDC,
everything()
) |>
arrange(desc(Created_Date_SFDC))
DM_Lead <- final_campaign_sfdc_lead |>
filter(campaign_name %in% "Mkt_DM_Snowflake_2024", ignore_case = TRUE)
View(DM_Lead)
View(final_campaign_sfdc_lead)
DM_Lead <- final_campaign_sfdc_lead |>
filter(campaign_name %in% "Mkt_DM_Snowflake", ignore_case = TRUE)
DM_Lead <- final_campaign_sfdc_lead |>
filter(str_detect(campaign_name, "Mkt_DM_Snowflake_2024", ignore_case = TRUE))
DM_Lead <- final_campaign_sfdc_lead |>
filter(
str_detect(campaign_name, "Mkt_DM_Snowflake_2024", ignore_case = TRUE
)
)
DM_Lead <- final_campaign_sfdc_lead |>
filter(
str_detect(campaign_name, "(?i)Mkt_DM_Snowflake_2024"
)
)
View(DM_Lead)
DM_Lead <- final_campaign_sfdc_lead |>
filter(
str_detect(campaign_name, "(?i)Mkt_DM_Snowflake_2024"
)
)
write_sheet(DM_Lead,
ss = "18viPByX4RQQx6D7PBC7COCnZwQSPB5bEjPBxLEDx8gU",
sheet = "Lead Data (+Campaign)"
)
rm(list = setdiff(ls(), c("DM_Lead")))
