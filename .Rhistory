!(is.na(first_mel_timestamp)) &
!(unqualified_reason %in% c("Current Client", "Duplicate")) ~ TRUE,
TRUE ~ FALSE
)
) |>
rename(business_phone = business_phone_line_1) |>
select(is_mel, is_mql, is_sql, is_onboarded, everything())
write_csv(all_lead__c, "~/marketing-operation/max_requested_reports/individual_channel_performance/all_time_leads_1_14_2025.csv", na = "")
library(tidyverse)
library(salesforcer)
library(yaml)
library(httr)
library(googlesheets4)
library(keyring)
library(janitor)
library(here)
setwd(here("past projects"))
client_secret_path <- keyring::key_get(
service = "googlesheets4",
username = "client_secret_path"
)
email <- keyring::key_get(service = "googlesheets4", username = "email")
# configure and authenticate using retrieved credentials
gs4_auth_configure(path = client_secret_path)
gs4_auth(email = email, cache = TRUE)
rm(client_secret_path, email)
################### loading data ###########################
all_lead__r <-
read_sheet(
ss = "1xy2bw5ckuUod-5In2iZZuWxuIxvMqzI-fF_jODddGVg",
sheet = "[all time] Marketing MEL/MQL Report",
range = "A:AM"
) |>
clean_names()
#################### Cleaning Data ##########################
all_lead__c <- all_lead__r |>
filter( !is.na(latest_campaign),
!str_detect(latest_campaign, "outbound")) |>
mutate(
first_mel_timestamp = parse_date_time(first_mel_timestamp, orders = c("ymd HMS", "ymd")),
first_mel_month = format(first_mel_timestamp, "%Y-%m"),
first_mel_year = year(first_mel_timestamp)
) |>
mutate(
mobile_primary = str_replace_all(mobile_primary, "[^\\d]", ""),
business_phone_line_1 = str_replace_all(
str_replace_all(business_phone_line_1, "-", ""),
"[^0-9]", ""
),
is_onboarded = case_when(stage == "Onboarded" ~ TRUE, TRUE ~ FALSE),
is_sql = case_when(
opportunity_id != "" ~ TRUE,
TRUE ~ FALSE
),
is_mql = case_when(
!(is.na(latest_mql_time_stamp))&
!(unqualified_reason %in%
c(
"Current Client",
"Duplicate",
"Not a Restaurant"
)) ~ TRUE,
TRUE ~ FALSE
),
is_mel = case_when(
!(is.na(first_mel_timestamp)) &
!(unqualified_reason %in% c("Current Client", "Duplicate")) ~ TRUE,
TRUE ~ FALSE
)
) |>
rename(business_phone = business_phone_line_1) |>
select(is_mel, is_mql, is_sql, is_onboarded, everything())
write_csv(all_lead__c, "~/marketing-operation/max_requested_reports/individual_channel_performance/all_time_leads_1_14_2025.csv", na = "")
rm(list = setdiff(ls(), "all_lead__c"))
library(tidyverse)
library(salesforcer)
library(yaml)
library(httr)
library(googlesheets4)
library(keyring)
library(janitor)
source("~/marketing-operation/max_requested_reports/individual_channel_performance/all_time_leads.R")
ead_2025 <- all_lead__c |>
filter(first_mel_year == 2025) |>
select(-first_mel_year) |>
select(first_mel_month, everything())
data_split <- lead_2025 |>
mutate(lead_channel_split = str_split(lead_channel, ";\\s*"),
total_leads = 1) |>
unnest(lead_channel_split) |>
group_by(first_mel_month, lead_channel, total_leads) |>
mutate(channel_counts = n_distinct(lead_channel_split)) |>
ungroup() |>
mutate(funnel_credit = total_leads / channel_counts)
lead_2025 <- all_lead__c |>
filter(first_mel_year == 2025) |>
select(-first_mel_year) |>
select(first_mel_month, everything())
data_split <- lead_2025 |>
mutate(lead_channel_split = str_split(lead_channel, ";\\s*"),
total_leads = 1) |>
unnest(lead_channel_split) |>
group_by(first_mel_month, lead_channel, total_leads) |>
mutate(channel_counts = n_distinct(lead_channel_split)) |>
ungroup() |>
mutate(funnel_credit = total_leads / channel_counts)
write_csv(data_split, "~/marketing-operation/max_requested_reports/individual_channel_performance/2025_lead_c.csv")
rm(list = setdiff(ls(), "data_split"))
library(tidyverse)
library(salesforcer)
library(yaml)
library(httr)
library(googlesheets4)
library(keyring)
library(janitor)
glimpse(data_split)
aggregated_table <- data_split |>
group_by(lead_channel_split, first_mel_month) |>
summarise(total_mel = sum(funnel_credit * is_mel),
total_mql = sum(funnel_credit * is_mql),
total_sql = sum(funnel_credit * is_sql),
total_onboarded = sum(funnel_credit * is_onboarded),
.groups = "drop")
write_csv(aggregated_table, "/Users/yukachen/marketing-operation/max_requested_reports/individual_channel_performance/aggregated_table_2025.csv", na = "")
View(aggregated_table)
library(tidyverse)
library(salesforcer)
library(yaml)
library(httr)
library(googlesheets4)
library(keyring)
library(janitor)
library(here)
setwd(here("past projects"))
client_secret_path <- keyring::key_get(
service = "googlesheets4",
username = "client_secret_path"
)
email <- keyring::key_get(service = "googlesheets4", username = "email")
# configure and authenticate using retrieved credentials
gs4_auth_configure(path = client_secret_path)
gs4_auth(email = email, cache = TRUE)
rm(client_secret_path, email)
################### loading data ###########################
all_lead__r <-
read_sheet(
ss = "1xy2bw5ckuUod-5In2iZZuWxuIxvMqzI-fF_jODddGVg",
sheet = "[all time] Marketing MEL/MQL Report",
range = "A:AM"
) |>
clean_names()
all_lead__c <- all_lead__r |>
filter( !is.na(latest_campaign),
!str_detect(latest_campaign, "outbound")) |>
mutate(
first_mel_timestamp = parse_date_time(first_mel_timestamp, orders = c("ymd HMS", "ymd")),
first_mel_month = format(first_mel_timestamp, "%Y-%m"),
first_mel_year = year(first_mel_timestamp)
) |>
mutate(
mobile_primary = str_replace_all(mobile_primary, "[^\\d]", ""),
business_phone_line_1 = str_replace_all(
str_replace_all(business_phone_line_1, "-", ""),
"[^0-9]", ""
),
is_cw = case_when(stage == "Closed Won"|"Onboarded" ~ TRUE, TRUE ~ FALSE),
is_sql = case_when(
opportunity_id != "" ~ TRUE,
TRUE ~ FALSE
),
is_mql = case_when(
!(is.na(latest_mql_time_stamp))&
!(unqualified_reason %in%
c(
"Current Client",
"Duplicate",
"Not a Restaurant"
)) ~ TRUE,
TRUE ~ FALSE
),
is_mel = case_when(
!(is.na(first_mel_timestamp)) &
!(unqualified_reason %in% c("Current Client", "Duplicate")) ~ TRUE,
TRUE ~ FALSE
)
) |>
rename(business_phone = business_phone_line_1) |>
select(is_mel, is_mql, is_sql, is_onboarded, everything())
View(all_lead__r)
all_lead__r <-
read_sheet(
ss = "1xy2bw5ckuUod-5In2iZZuWxuIxvMqzI-fF_jODddGVg",
sheet = "[all time] Marketing MEL/MQL Report",
range = "A:AM"
) |>
clean_names()
all_lead__r <-
read_sheet(
ss = "1xy2bw5ckuUod-5In2iZZuWxuIxvMqzI-fF_jODddGVg",
sheet = "[all time] Marketing MEL/MQL Report",
range = "A:AN"
) |>
clean_names()
View(all_lead__r)
all_lead__c <- all_lead__r |>
filter( !is.na(latest_campaign),
!str_detect(latest_campaign, "outbound")) |>
mutate(
first_mel_timestamp = parse_date_time(first_mel_timestamp, orders = c("ymd HMS", "ymd")),
first_mel_month = format(first_mel_timestamp, "%Y-%m"),
first_mel_year = year(first_mel_timestamp)
) |>
mutate(
mobile_primary = str_replace_all(mobile_primary, "[^\\d]", ""),
business_phone_line_1 = str_replace_all(
str_replace_all(business_phone_line_1, "-", ""),
"[^0-9]", ""
),
is_cw = case_when(
stage %in% c("Closed Won", "Onboarded")                           ~ TRUE,
stage == "Closed Lost" & stage_at_closed_lost == "Closed Won"    ~ TRUE,
TRUE                                                             ~ FALSE
),
is_sql = case_when(
opportunity_id != "" ~ TRUE,
TRUE ~ FALSE
),
is_mql = case_when(
!(is.na(latest_mql_time_stamp))&
!(unqualified_reason %in%
c(
"Current Client",
"Duplicate",
"Not a Restaurant"
)) ~ TRUE,
TRUE ~ FALSE
),
is_mel = case_when(
!(is.na(first_mel_timestamp)) &
!(unqualified_reason %in% c("Current Client", "Duplicate")) ~ TRUE,
TRUE ~ FALSE
)
) |>
rename(business_phone = business_phone_line_1) |>
select(is_mel, is_mql, is_sql, is_onboarded, everything())
all_lead__c <- all_lead__r |>
filter( !is.na(latest_campaign),
!str_detect(latest_campaign, "outbound")) |>
mutate(
first_mel_timestamp = parse_date_time(first_mel_timestamp, orders = c("ymd HMS", "ymd")),
first_mel_month = format(first_mel_timestamp, "%Y-%m"),
first_mel_year = year(first_mel_timestamp)
) |>
mutate(
mobile_primary = str_replace_all(mobile_primary, "[^\\d]", ""),
business_phone_line_1 = str_replace_all(
str_replace_all(business_phone_line_1, "-", ""),
"[^0-9]", ""
),
is_cw = case_when(
stage %in% c("Closed Won", "Onboarded")                           ~ TRUE,
stage == "Closed Lost" & stage_at_closed_lost == "Closed Won"    ~ TRUE,
TRUE                                                             ~ FALSE
),
is_sql = case_when(
opportunity_id != "" ~ TRUE,
TRUE ~ FALSE
),
is_mql = case_when(
!(is.na(latest_mql_time_stamp))&
!(unqualified_reason %in%
c(
"Current Client",
"Duplicate",
"Not a Restaurant"
)) ~ TRUE,
TRUE ~ FALSE
),
is_mel = case_when(
!(is.na(first_mel_timestamp)) &
!(unqualified_reason %in% c("Current Client", "Duplicate")) ~ TRUE,
TRUE ~ FALSE
)
) |>
rename(business_phone = business_phone_line_1) |>
select(is_mel, is_mql, is_sql, is_cw, everything())
all_lead__c <- all_lead__r |>
filter( !is.na(latest_campaign),
!str_detect(latest_campaign, "outbound")) |>
mutate(
# parse datesâ€¦
first_mel_timestamp = parse_date_time(first_mel_timestamp, orders = c("ymd HMS", "ymd")),
first_mel_month     = format(first_mel_timestamp, "%Y-%m"),
first_mel_year      = year(first_mel_timestamp)
) |>
mutate(
# coerce to character _before_ cleaning
mobile_primary = as.character(mobile_primary) |>
str_replace_all("[^\\d]", ""),
business_phone = as.character(business_phone_line_1) |>
str_replace_all("[^\\d]", ""),
is_cw = case_when(
stage %in% c("Closed Won", "Onboarded")                           ~ TRUE,
stage == "Closed Lost" & stage_at_closed_lost == "Closed Won"    ~ TRUE,
TRUE                                                             ~ FALSE
),
is_sql = case_when(
opportunity_id != "" ~ TRUE,
TRUE ~ FALSE
),
is_mql = case_when(
!(is.na(latest_mql_time_stamp))&
!(unqualified_reason %in%
c(
"Current Client",
"Duplicate",
"Not a Restaurant"
)) ~ TRUE,
TRUE ~ FALSE
),
is_mel = case_when(
!(is.na(first_mel_timestamp)) &
!(unqualified_reason %in% c("Current Client", "Duplicate")) ~ TRUE,
TRUE ~ FALSE
)
) |>
rename(business_phone = business_phone_line_1) |>
select(is_mel, is_mql, is_sql, is_cw, everything())
all_lead__c <- all_lead__r |>
filter(
!is.na(latest_campaign),
!str_detect(latest_campaign, "outbound")
) |>
mutate(
# parse datesâ€¦
first_mel_timestamp = parse_date_time(first_mel_timestamp, orders = c("ymd HMS", "ymd")),
first_mel_month     = format(first_mel_timestamp, "%Y-%m"),
first_mel_year      = year(first_mel_timestamp)
) |>
mutate(
# coerce to character _before_ cleaning
mobile_primary = as.character(mobile_primary) |>
str_replace_all("[^\\d]", ""),
business_phone = as.character(business_phone_line_1) |>
str_replace_all("[^\\d]", ""),
is_cw  = (stage %in% c("Closed Won", "Onboarded")) |
(stage == "Closed Lost" & stage_at_closed_lost == "Closed Won"),
is_sql = opportunity_id != "",
is_mql = !is.na(latest_mql_time_stamp) &
!unqualified_reason %in% c("Current Client", "Duplicate", "Not a Restaurant"),
is_mel = !is.na(first_mel_timestamp) &
!unqualified_reason %in% c("Current Client", "Duplicate")
) |>
select(is_mel, is_mql, is_sql, is_cw, everything())
View(all_lead__c)
write_csv(all_lead__c, "~/marketing-operation/max_requested_reports/individual_channel_performance/all_time_leads_2025.csv", na = "")
rm(list = setdiff(ls(), "all_lead__c"))
library(tidyverse)
library(salesforcer)
library(yaml)
library(httr)
library(googlesheets4)
library(keyring)
library(janitor)
#source("~/marketing-operation/max_requested_reports/individual_channel_performance/all_time_leads.R")
lead_2025 <- all_lead__c |>
filter(first_mel_year == 2025) |>
select(-first_mel_year) |>
select(first_mel_month, everything())
data_split <- lead_2025 |>
mutate(lead_channel_split = str_split(lead_channel, ";\\s*"),
total_leads = 1) |>
unnest(lead_channel_split) |>
group_by(first_mel_month, lead_channel, total_leads) |>
mutate(channel_counts = n_distinct(lead_channel_split)) |>
ungroup() |>
mutate(funnel_credit = total_leads / channel_counts)
write_csv(data_split, "~/marketing-operation/max_requested_reports/individual_channel_performance/2025_lead_c.csv")
rm(list = setdiff(ls(), "data_split"))
aggregated_table <- data_split |>
group_by(lead_channel_split, first_mel_month) |>
summarise(total_mel = sum(funnel_credit * is_mel),
total_mql = sum(funnel_credit * is_mql),
total_sql = sum(funnel_credit * is_sql),
total_cw = sum(funnel_credit * is_cw),
.groups = "drop")
library(tidyverse)
library(salesforcer)
library(yaml)
library(httr)
library(googlesheets4)
library(keyring)
library(janitor)
glimpse(data_split)
aggregated_table <- data_split |>
group_by(lead_channel_split, first_mel_month) |>
summarise(total_mel = sum(funnel_credit * is_mel),
total_mql = sum(funnel_credit * is_mql),
total_sql = sum(funnel_credit * is_sql),
total_cw = sum(funnel_credit * is_cw),
.groups = "drop")
write_csv(aggregated_table, "/Users/yukachen/marketing-operation/max_requested_reports/individual_channel_performance/aggregated_table_2025.csv", na = "")
View(aggregated_table)
library(tidyverse)
library(salesforcer)
library(yaml)
library(httr)
library(googlesheets4)
library(keyring)
library(janitor)
library(here)
setwd(here("past projects"))
client_secret_path <- keyring::key_get(
service = "googlesheets4",
username = "client_secret_path"
)
email <- keyring::key_get(service = "googlesheets4", username = "email")
# configure and authenticate using retrieved credentials
gs4_auth_configure(path = client_secret_path)
gs4_auth(email = email, cache = TRUE)
rm(client_secret_path, email)
################### loading data ###########################
all_lead__r <-
read_sheet(
ss = "1xy2bw5ckuUod-5In2iZZuWxuIxvMqzI-fF_jODddGVg",
sheet = "[all time] Marketing MEL/MQL Report",
range = "A:AN"
) |>
clean_names()
#################### Cleaning Data ##########################
all_lead__c <- all_lead__r |>
filter(
!is.na(latest_campaign),
!str_detect(latest_campaign, "outbound")
) |>
mutate(
# parse datesâ€¦
first_mel_timestamp = parse_date_time(first_mel_timestamp, orders = c("ymd HMS", "ymd")),
first_mel_month     = format(first_mel_timestamp, "%Y-%m"),
first_mel_year      = year(first_mel_timestamp)
) |>
mutate(
# coerce to character _before_ cleaning
mobile_primary = as.character(mobile_primary) |>
str_replace_all("[^\\d]", ""),
business_phone = as.character(business_phone_line_1) |>
str_replace_all("[^\\d]", ""),
is_cw  = (stage %in% c("Closed Won", "Onboarded")) |
(stage == "Closed Lost" & stage_at_closed_lost == "Closed Won"),
is_sql = opportunity_id != "",
is_mql = !is.na(latest_mql_time_stamp) &
!unqualified_reason %in% c("Current Client", "Duplicate", "Not a Restaurant"),
is_mel = !is.na(first_mel_timestamp) &
!unqualified_reason %in% c("Current Client", "Duplicate")
) |>
select(is_mel, is_mql, is_sql, is_cw, everything())
write_csv(all_lead__c, "~/marketing-operation/max_requested_reports/individual_channel_performance/all_time_leads_2025.csv", na = "")
rm(list = setdiff(ls(), "all_lead__c"))
View(all_lead__c)
library(tidyverse)
library(salesforcer)
library(yaml)
library(httr)
library(googlesheets4)
library(keyring)
library(janitor)
#source("~/marketing-operation/max_requested_reports/individual_channel_performance/all_time_leads.R")
lead_2025 <- all_lead__c |>
filter(first_mel_year == 2025) |>
select(-first_mel_year) |>
select(first_mel_month, everything())
data_split <- lead_2025 |>
mutate(lead_channel_split = str_split(lead_channel, ";\\s*"),
total_leads = 1) |>
unnest(lead_channel_split) |>
group_by(first_mel_month, lead_channel, total_leads) |>
mutate(channel_counts = n_distinct(lead_channel_split)) |>
ungroup() |>
mutate(funnel_credit = total_leads / channel_counts)
write_csv(data_split, "~/marketing-operation/max_requested_reports/individual_channel_performance/2025_lead_c.csv")
rm(list = setdiff(ls(), "data_split","all_lead__c"))
View(data_split)
View(lead_2025)
library(tidyverse)
library(salesforcer)
library(yaml)
library(httr)
library(googlesheets4)
library(keyring)
library(janitor)
glimpse(data_split)
aggregated_table <- data_split |>
group_by(lead_channel_split, first_mel_month) |>
summarise(total_mel = sum(funnel_credit * is_mel),
total_mql = sum(funnel_credit * is_mql),
total_sql = sum(funnel_credit * is_sql),
total_cw = sum(funnel_credit * is_cw),
.groups = "drop")
write_csv(aggregated_table, "/Users/yukachen/marketing-operation/max_requested_reports/individual_channel_performance/aggregated_table_2025.csv", na = "")
View(aggregated_table)
View(data_split)
View(data_split)
aggregated_table <- data_split %>%
group_by(lead_channel_split, first_mel_month) %>%
summarise(
total_mel = sum(funnel_credit * is_mel, na.rm = TRUE),
total_mql = sum(funnel_credit * is_mql, na.rm = TRUE),
total_sql = sum(funnel_credit * is_sql, na.rm = TRUE),
total_cw  = sum(funnel_credit * is_cw,  na.rm = TRUE),
.groups    = "drop"
)
View(aggregated_table)
