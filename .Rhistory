email <- keyring::key_get(service = "googlesheets4", username = "email")
# configure and authenticate using retrieved credentials
gs4_auth_configure(path = client_secret_path)
gs4_auth(email = email, cache = TRUE)
folder_path <- here("form-fill", "august-formfill-2024", "august-19", "raw-data")
filenames <- list.files(folder_path, pattern = "\\.csv$", full.names = TRUE)
col_types <- cols(
`手机号码` = col_character(),
`Mobile Number` = col_character(),
.default = col_guess() # This will guess other column types
)
# Read and combine the files with consistent column types
combo_data <- purrr::map_df(
filenames,
~ read_csv(.x, col_types = col_types) |>
mutate(filename = .x)
)
setwd("~/marketing-operation")
setwd("~/marketing-operation")
library(tidyverse)
library(salesforcer)
library(yaml)
library(httr)
library(googlesheets4)
library(keyring)
library(here)
client_secret_path <- keyring::key_get(
service = "googlesheets4",
username = "client_secret_path" # path to google developer credential
)
# keyring::key_set(
#   service = "googlesheets4",
#   username = "client_secret_path" # path to google developer credential
# )
email <- keyring::key_get(service = "googlesheets4", username = "email")
# configure and authenticate using retrieved credentials
gs4_auth_configure(path = client_secret_path)
gs4_auth(email = email, cache = TRUE)
folder_path <- here("form-fill", "august-formfill-2024", "august-19", "raw-data")
filenames <- list.files(folder_path, pattern = "\\.csv$", full.names = TRUE)
col_types <- cols(
`手机号码` = col_character(),
`Mobile Number` = col_character(),
.default = col_guess() # This will guess other column types
)
# Read and combine the files with consistent column types
combo_data <- purrr::map_df(
filenames,
~ read_csv(.x, col_types = col_types) |>
mutate(filename = .x)
)
# Function to select the first non-missing column among multiple options
select_first_existing_column <- function(df, columns) {
existing_col <- columns[columns %in% colnames(df)]
if (length(existing_col) > 0) {
return(df[[existing_col[1]]])
} else {
return(NA)
}
}
combo_data_clean <- combo_data |>
mutate(
name = select_first_existing_column(combo_data, c("姓氏", "Last Name")),
phone_number = select_first_existing_column(combo_data, c("手机号码", "Mobile Number")),
state = select_first_existing_column(combo_data, c("州", "State")),
cuisine_type = select_first_existing_column(combo_data, c("餐馆菜系", "Cuisine Type")),
email = select_first_existing_column(combo_data, c("您的邮箱地址", "Email Address")) # nolint # nolint
) |>
select(-any_of(c("手机号码", "Mobile Number", "州", "State", "餐馆菜系", "Cuisine Type", "姓氏", "Last Name", "您的邮箱地址", "Email Address"))) |>
select(where(~ !all(is.na(.)))) |>
filter(!str_detect(name, "(?i)marketing|test"))
ordered_columns <- c(
"name", "email", "phone_number", "resturantname", "state", "cuisine_type",
"utm_campaign", "utm_id", "utm_source", "utm_medium",
"Form Name (ID)", "Submission ID", "Created At", "User ID",
"User Agent", "User IP", "Referrer", "Terms and Conditions", "filename"
)
combo_data_ordered <- combo_data_clean |>
select(all_of(ordered_columns))
combo_data_clean <- combo_data |>
mutate(
name = select_first_existing_column(combo_data, c("姓氏", "Last Name")),
phone_number = select_first_existing_column(combo_data, c("手机号码", "Mobile Number")),
state = select_first_existing_column(combo_data, c("州", "State")),
cuisine_type = select_first_existing_column(combo_data, c("餐馆菜系", "Cuisine Type")),
email = select_first_existing_column(combo_data, c("您的邮箱地址", "Email Address")) # nolint # nolint
) |>
select(-any_of(c("手机号码", "Mobile Number", "州", "State", "餐馆菜系", "Cuisine Type", "姓氏", "Last Name", "您的邮箱地址", "Email Address"))) |>
select(where(~ !all(is.na(.)))) |>
filter(!str_detect(name, "(?i)marketing|test"))
View(combo_data_clean)
colnames(combo_data_clean)
library(janitor)
install.packages("janitor")
combo_data_clean <- combo_data |>
mutate(
name = select_first_existing_column(combo_data, c("姓氏", "Last Name")),
phone_number = select_first_existing_column(combo_data, c("手机号码", "Mobile Number")),
state = select_first_existing_column(combo_data, c("州", "State")),
cuisine_type = select_first_existing_column(combo_data, c("餐馆菜系", "Cuisine Type")),
email = select_first_existing_column(combo_data, c("您的邮箱地址", "Email Address")) # nolint # nolint
) |>
select(-any_of(c("手机号码", "Mobile Number", "州", "State", "餐馆菜系", "Cuisine Type", "姓氏", "Last Name", "您的邮箱地址", "Email Address"))) |>
select(where(~ !all(is.na(.)))) |>
filter(!str_detect(name, "(?i)marketing|test")) |>
clean_names()
setwd("~/marketing-operation")
library(tidyverse)
library(salesforcer)
library(yaml)
library(httr)
library(googlesheets4)
library(keyring)
library(here)
library(janitor)
library(tidyverse)
library(salesforcer)
library(yaml)
library(httr)
library(googlesheets4)
library(keyring)
library(here)
library(janitor)
client_secret_path <- keyring::key_get(
service = "googlesheets4",
username = "client_secret_path" # path to google developer credential
)
# keyring::key_set(
#   service = "googlesheets4",
#   username = "client_secret_path" # path to google developer credential
# )
email <- keyring::key_get(service = "googlesheets4", username = "email")
# configure and authenticate using retrieved credentials
gs4_auth_configure(path = client_secret_path)
gs4_auth(email = email, cache = TRUE)
folder_path <- here("form-fill", "august-formfill-2024", "august-19", "raw-data")
filenames <- list.files(folder_path, pattern = "\\.csv$", full.names = TRUE)
col_types <- cols(
`手机号码` = col_character(),
`Mobile Number` = col_character(),
.default = col_guess() # This will guess other column types
)
# Read and combine the files with consistent column types
combo_data <- purrr::map_df(
filenames,
~ read_csv(.x, col_types = col_types) |>
mutate(filename = .x)
)
# Function to select the first non-missing column among multiple options
select_first_existing_column <- function(df, columns) {
existing_col <- columns[columns %in% colnames(df)]
if (length(existing_col) > 0) {
return(df[[existing_col[1]]])
} else {
return(NA)
}
}
combo_data_clean <- combo_data |>
mutate(
name = select_first_existing_column(combo_data, c("姓氏", "Last Name")),
phone_number = select_first_existing_column(combo_data, c("手机号码", "Mobile Number")),
state = select_first_existing_column(combo_data, c("州", "State")),
cuisine_type = select_first_existing_column(combo_data, c("餐馆菜系", "Cuisine Type")),
email = select_first_existing_column(combo_data, c("您的邮箱地址", "Email Address")) # nolint # nolint
) |>
select(-any_of(c("手机号码", "Mobile Number", "州", "State", "餐馆菜系", "Cuisine Type", "姓氏", "Last Name", "您的邮箱地址", "Email Address"))) |>
select(where(~ !all(is.na(.)))) |>
filter(!str_detect(name, "(?i)marketing|test")) |>
clean_names()
View(combo_data_clean)
colnames(combo_data_clean)
combo_data_clean <- combo_data_clean %>%
select(name, phone_number, resturantname, state, everything())
setwd("~/marketing-operation")
library(tidyverse)
library(salesforcer)
library(yaml)
library(httr)
library(googlesheets4)
library(keyring)
library(here)
library(janitor)
client_secret_path <- keyring::key_get(
service = "googlesheets4",
username = "client_secret_path" # path to google developer credential
)
# keyring::key_set(
#   service = "googlesheets4",
#   username = "client_secret_path" # path to google developer credential
# )
email <- keyring::key_get(service = "googlesheets4", username = "email")
# configure and authenticate using retrieved credentials
gs4_auth_configure(path = client_secret_path)
gs4_auth(email = email, cache = TRUE)
folder_path <- here("form-fill", "august-formfill-2024", "august-19", "raw-data")
filenames <- list.files(folder_path, pattern = "\\.csv$", full.names = TRUE)
col_types <- cols(
`手机号码` = col_character(),
`Mobile Number` = col_character(),
.default = col_guess() # This will guess other column types
)
# Read and combine the files with consistent column types
combo_data <- purrr::map_df(
filenames,
~ read_csv(.x, col_types = col_types) |>
mutate(filename = .x)
)
# Function to select the first non-missing column among multiple options
select_first_existing_column <- function(df, columns) {
existing_col <- columns[columns %in% colnames(df)]
if (length(existing_col) > 0) {
return(df[[existing_col[1]]])
} else {
return(NA)
}
}
combo_data_clean <- combo_data |>
mutate(
name = select_first_existing_column(combo_data, c("姓氏", "Last Name")),
phone_number = select_first_existing_column(combo_data, c("手机号码", "Mobile Number")),
state = select_first_existing_column(combo_data, c("州", "State")),
cuisine_type = select_first_existing_column(combo_data, c("餐馆菜系", "Cuisine Type")),
email = select_first_existing_column(combo_data, c("您的邮箱地址", "Email Address")) # nolint # nolint
) |>
select(-any_of(c("手机号码", "Mobile Number", "州", "State", "餐馆菜系", "Cuisine Type", "姓氏", "Last Name", "您的邮箱地址", "Email Address"))) |>
select(where(~ !all(is.na(.)))) |>
filter(!str_detect(name, "(?i)marketing|test")) |>
clean_names()
colnames(combo_data_clean)
combo_data_ordered <- combo_data_clean %>%
select(name, phone_number, resturantname, state, everything())
combo_data2 <- combo_data_ordered |>
mutate(phone_number = str_replace_all(phone_number, "-", "") |>
str_replace_all("[^0-9]", "")) |>
mutate(
channel = case_when(
str_detect(filename, "(?i)SEM|Blog Pages Contact us") | str_detect(utm_source, "(?i)google") ~ "SEM",
str_detect(filename, "(?i)SEO|Contact us") ~ "SEO",
str_detect(filename, "(?i)SMS") ~ "SMS",
str_detect(filename, "(?i)Brizo|(?i)DM") | str_detect(utm_medium, "(?i)DirectMail") ~ "DM",
str_detect(filename, "(?i)complete|(?i)guide") | str_detect(utm_medium, "(?i)complete-guide") ~ "Complete Guide"
)
) |>
select(channel, everything()) |>
rename(Create_Date = `Created At`) |>
mutate(
Create_Date = as_date(Create_Date), # Ensure Create_Date is in Date format
week_start = floor_date(Create_Date, "week", week_start = 1), # Start of the week (Monday)
week_end = ceiling_date(Create_Date, "week", week_start = 1) - 1, # End of the week (Sunday)
week = paste(format(week_start, "%m/%d"), "-", format(week_end, "%m/%d")) # Format as MM/DD-MM/DD
) |>
select(-week_start, -week_end) |>
select(week, channel, everything())
setwd("~/marketing-operation")
library(tidyverse)
library(salesforcer)
library(yaml)
library(httr)
library(googlesheets4)
library(keyring)
library(here)
library(janitor)
client_secret_path <- keyring::key_get(
service = "googlesheets4",
username = "client_secret_path" # path to google developer credential
)
# keyring::key_set(
#   service = "googlesheets4",
#   username = "client_secret_path" # path to google developer credential
# )
email <- keyring::key_get(service = "googlesheets4", username = "email")
# configure and authenticate using retrieved credentials
gs4_auth_configure(path = client_secret_path)
gs4_auth(email = email, cache = TRUE)
folder_path <- here("form-fill", "august-formfill-2024", "august-19", "raw-data")
filenames <- list.files(folder_path, pattern = "\\.csv$", full.names = TRUE)
col_types <- cols(
`手机号码` = col_character(),
`Mobile Number` = col_character(),
.default = col_guess() # This will guess other column types
)
# Read and combine the files with consistent column types
combo_data <- purrr::map_df(
filenames,
~ read_csv(.x, col_types = col_types) |>
mutate(filename = .x)
)
# Function to select the first non-missing column among multiple options
select_first_existing_column <- function(df, columns) {
existing_col <- columns[columns %in% colnames(df)]
if (length(existing_col) > 0) {
return(df[[existing_col[1]]])
} else {
return(NA)
}
}
combo_data_clean <- combo_data |>
mutate(
name = select_first_existing_column(combo_data, c("姓氏", "Last Name")),
phone_number = select_first_existing_column(combo_data, c("手机号码", "Mobile Number")),
state = select_first_existing_column(combo_data, c("州", "State")),
cuisine_type = select_first_existing_column(combo_data, c("餐馆菜系", "Cuisine Type")),
email = select_first_existing_column(combo_data, c("您的邮箱地址", "Email Address")) # nolint # nolint
) |>
select(-any_of(c("手机号码", "Mobile Number", "州", "State", "餐馆菜系", "Cuisine Type", "姓氏", "Last Name", "您的邮箱地址", "Email Address"))) |>
select(where(~ !all(is.na(.)))) |>
filter(!str_detect(name, "(?i)marketing|test")) |>
clean_names()
colnames(combo_data_clean)
combo_data_ordered <- combo_data_clean %>%
select(name, phone_number, resturantname, state, everything())
combo_data2 <- combo_data_ordered |>
mutate(phone_number = str_replace_all(phone_number, "-", "") |>
str_replace_all("[^0-9]", "")) |>
mutate(
channel = case_when(
str_detect(filename, "(?i)SEM|Blog Pages Contact us") | str_detect(utm_source, "(?i)google") ~ "SEM",
str_detect(filename, "(?i)SEO|Contact us") ~ "SEO",
str_detect(filename, "(?i)SMS") ~ "SMS",
str_detect(filename, "(?i)Brizo|(?i)DM") | str_detect(utm_medium, "(?i)DirectMail") ~ "DM",
str_detect(filename, "(?i)complete|(?i)guide") | str_detect(utm_medium, "(?i)complete-guide") ~ "Complete Guide"
)
) |>
select(channel, everything()) |>
rename(Create_Date = `Created At`) |>
mutate(
Create_Date = as_date(Create_Date), # Ensure Create_Date is in Date format
week_start = floor_date(Create_Date, "week", week_start = 1), # Start of the week (Monday)
week_end = ceiling_date(Create_Date, "week", week_start = 1) - 1, # End of the week (Sunday)
week = paste(format(week_start, "%m/%d"), "-", format(week_end, "%m/%d")) # Format as MM/DD-MM/DD
) |>
select(-week_start, -week_end) |>
select(week, channel, everything())
View(combo_data_ordered)
combo_data2 <- combo_data_ordered |>
mutate(phone_number = str_replace_all(phone_number, "-", "") |>
str_replace_all("[^0-9]", "")) |>
mutate(
channel = case_when(
str_detect(filename, "(?i)SEM|Blog Pages Contact us") | str_detect(utm_source, "(?i)google") ~ "SEM",
str_detect(filename, "(?i)SEO|Contact us") ~ "SEO",
str_detect(filename, "(?i)SMS") ~ "SMS",
str_detect(filename, "(?i)Brizo|(?i)DM") | str_detect(utm_medium, "(?i)DirectMail") ~ "DM",
str_detect(filename, "(?i)complete|(?i)guide") | str_detect(utm_medium, "(?i)complete-guide") ~ "Complete Guide"
)
) |>
select(channel, everything()) |>
rename(created_date = created_at) |>
mutate(
created_date = as_date(created_date), # Ensure Create_Date is in Date format
week_start = floor_date(created_date, "week", week_start = 1), # Start of the week (Monday)
week_end = ceiling_date(created_date, "week", week_start = 1) - 1, # End of the week (Sunday)
week = paste(format(week_start, "%m/%d"), "-", format(week_end, "%m/%d")) # Format as MM/DD-MM/DD
) |>
select(-week_start, -week_end) |>
select(week, channel, everything())
combo_data2 |>
group_by(channel) |>
summarize(form_fill_numbers = n()) |>
arrange(desc(form_fill_numbers)) -> summary_table
sheet_write(combo_data2, ss = "18y8li4QmbStR-6XFc-Vx8o9qzTDJrGIExAObVzG8RpE", sheet = "August")
View(summary_table)
install.packages("lintr")
library(lintr)
here()
lintr("~/marketing-operation/form-fill/august-formfill-2024/august-19/formfill_cleaning.R")
lint("~/marketing-operation/form-fill/august-formfill-2024/august-19/formfill_cleaning.R")
styler:::style_active_file()
custom_style <- styler::tidyverse_style(
strict = TRUE,
indent_by = 2,
start_comments_with_one_space = TRUE,
reindention = styler::specify_reindention(
regex_pattern = c("#"),
indention = 2
)
)
styler::style_file("~/marketing-operation/form-fill/august-formfill-2024/august-19/formfill_cleaning.R", transformers = custom_style)
styler::style_file("~/marketing-operation/form-fill/august-formfill-2024/august-19/formfill_cleaning.R")
styler::tidyverse_style(scope = 'line_breaks')
lint("~/marketing-operation/form-fill/august-formfill-2024/august-19/formfill_cleaning.R")
emove.packages('styler')
remove.packages('styler')
remotes::install_github("r-lib/styler#500")
remotes::install_github("r-lib/styler#500")
remotes::install_github("r-lib/styler")
options(styler.addins_style_transformer = "styler::tidyverse_style(scope = 'line_breaks')")
tidyverse_style(scope = "linebreaks")
library(janitor)
combo_data_clean <- combo_data |>
mutate(
name = select_first_existing_column(combo_data, c("姓氏", "Last Name")),
phone_number = select_first_existing_column(combo_data, c("手机号码", "Mobile Number")),
state = select_first_existing_column(combo_data, c("州", "State")),
cuisine_type = select_first_existing_column(combo_data, c("餐馆菜系", "Cuisine Type")),
email = select_first_existing_column(combo_data, c("您的邮箱地址", "Email Address")) # nolint # nolint
) |>
select(-any_of(c("手机号码", "Mobile Number", "州", "State", "餐馆菜系", "Cuisine Type", "姓氏", "Last Name", "您的邮箱地址", "Email Address"))) |>
select(where(~ !all(is.na(.)))) |>
filter(!str_detect(name, "(?i)marketing|test")) |>
clean_names()
colnames(combo_data_clean)
combo_data_clean <- combo_data_clean %>%
select(name, phone_number, resturantname, state, everything())
combo_data2 <- "combo_data_ordered" |>
mutate("phone_number" = str_replace_all("phone_number", "-", "") |>
str_replace_all("[^0-9]", "")) |>
mutate(
channel = case_when(
str_detect("filename", "(?i)SEM|Blog Pages Contact us") | str_detect(utm_source, "(?i)google") ~ "SEM",
str_detect("filename", "(?i)SEO|Contact us") ~ "SEO",
str_detect("filename", "(?i)SMS") ~ "SMS",
str_detect("filename", "(?i)Brizo|(?i)DM") | str_detect(utm_medium, "(?i)DirectMail") ~ "DM",
str_detect("filename", "(?i)complete|(?i)guide") | str_detect(utm_medium, "(?i)complete-guide") ~ "Complete Guide"
)
) |>
select(channel, everything()) |>
rename(Create_Date = `Created At`) |>
mutate(
Create_Date = as_date(Create_Date), # Ensure Create_Date is in Date format
week_start = floor_date(Create_Date, "week", week_start = 1), # Start of the week (Monday)
week_end = ceiling_date(Create_Date, "week", week_start = 1) - 1, # End of the week (Sunday)
week = paste(format(week_start, "%m/%d"), "-", format(week_end, "%m/%d")) # Format as MM/DD-MM/DD
) |>
select(-week_start, -week_end) |>
select(week, channel, everything())
styler:::style_selection()
styler:::set_style_transformers()
styler:::style_selection()
styler:::style_active_file()
styler:::style_active_file()
styler:::style_active_file()
styler:::style_active_file()
combo_data2 <- combo_data_ordered |>
mutate(phone_number = str_replace_all(phone_number, "-", "") |>
str_replace_all("[^0-9]", "")) |>
mutate(
channel = case_when(
str_detect(filename, "(?i)SEM|Blog Pages Contact us") |
str_detect(utm_source, "(?i)google") ~ "SEM",
str_detect(filename, "(?i)SEO|Contact us") ~ "SEO",
str_detect(filename, "(?i)SMS") ~ "SMS",
str_detect(filename, "(?i)Brizo|(?i)DM") |
str_detect(utm_medium, "(?i)DirectMail") ~ "DM",
str_detect(filename, "(?i)complete|(?i)guide") |
str_detect(utm_medium, "(?i)complete-guide") ~ "Complete Guide"
)
) |>
select(channel, everything()) |>
rename(created_date = created_date) |>
mutate(
created_date = as_date(created_date),
week_start = floor_date(created_date,
"week",
week_start = 1
), # Start of the week (Monday)
week_end = ceiling_date(created_date,
"week",
week_start = 1
) - 1, # End of the week (Sunday)
week = paste(
format(week_start, "%m/%d"), "-",
format(week_end, "%m/%d")
) # Format as MM/DD-MM/DD
) |>
select(-week_start, -week_end) |>
select(week, channel, everything())
combo_data2 <- combo_data_ordered |>
mutate(phone_number = str_replace_all(phone_number, "-", "") |>
str_replace_all("[^0-9]", "")) |>
mutate(
channel = case_when(
str_detect(filename, "(?i)SEM|Blog Pages Contact us") |
str_detect(utm_source, "(?i)google") ~ "SEM",
str_detect(filename, "(?i)SEO|Contact us") ~ "SEO",
str_detect(filename, "(?i)SMS") ~ "SMS",
str_detect(filename, "(?i)Brizo|(?i)DM") |
str_detect(utm_medium, "(?i)DirectMail") ~ "DM",
str_detect(filename, "(?i)complete|(?i)guide") |
str_detect(utm_medium, "(?i)complete-guide") ~ "Complete Guide"
)
) |>
select(channel, everything()) |>
rename(created_date = created_at) |>
mutate(
created_date = as_date(created_date),
week_start = floor_date(created_date,
"week",
week_start = 1
), # Start of the week (Monday)
week_end = ceiling_date(created_date,
"week",
week_start = 1
) - 1, # End of the week (Sunday)
week = paste(
format(week_start, "%m/%d"), "-",
format(week_end, "%m/%d")
) # Format as MM/DD-MM/DD
) |>
select(-week_start, -week_end) |>
select(week, channel, everything())
combo_data2 |>
group_by(channel) |>
summarize(form_fill_numbers = n()) |>
arrange(desc(form_fill_numbers)) -> summary_table
styler:::style_active_file()
styler:::style_active_file()
sheet_write(combo_data2,
ss = "18y8li4QmbStR-6XFc-Vx8o9qzTDJrGIExAObVzG8RpE",
sheet = "August"
)
styler:::style_active_file()
