# Split the Cuisines column into a list of cuisines
mutate(Cuisines = str_split(Cuisines, ";\\s*")) %>%
# Expand the dataframe so each cuisine in the list gets its own row
unnest(Cuisines) %>%
# Calculate the split count for each cuisine
group_by(Cuisines)
View(all_info_corrected)
all_info_corrected <- all_info %>%
group_by(Cuisines) |>
summarise(counts=n()) |>
# Split the Cuisines column into a list of cuisines
mutate(Cuisines = str_split(Cuisines, ";\\s*")) %>%
# Expand the dataframe so each cuisine in the list gets its own row
unnest(Cuisines) %>%
# Calculate the split count for each cuisine
group_by(Cuisines) %>%
# As each cuisine from a multi-cuisine row is now separate, each counts as 1. Sum these for the total.
summarise(TotalCount = sum(counts / length(Cuisines)))
View(all_info_corrected)
all_info_corrected <- all_info %>%
group_by(Cuisines) |>
summarise(counts=n()) |>
# Split the Cuisines column into a list of cuisines
mutate(Cuisines = str_split(Cuisines, ";\\s*")) %>%
# Expand the dataframe so each cuisine in the list gets its own row
unnest(Cuisines) %>%
# Calculate the split count for each cuisine
group_by(Cuisines) %>%
# As each cuisine from a multi-cuisine row is now separate, each counts as 1. Sum these for the total.
summarise(TotalCount = sum(counts)) |>
mutate(TotalCount = round(TotalCount, digits = 2))
View(all_info_corrected)
all_info_corrected <- all_info %>%
group_by(Cuisines) |>
summarise(counts=n()) |>
# Split the Cuisines column into a list of cuisines
mutate(Cuisines = str_split(Cuisines, ";\\s*")) %>%
# Expand the dataframe so each cuisine in the list gets its own row
unnest(Cuisines)
View(all_info_corrected)
all_info_corrected <- all_info %>%
group_by(Cuisines) |>
summarise(counts=n()) |>
# Split the Cuisines column into a list of cuisines
mutate(Cuisines = str_split(Cuisines, ";\\s*"))
View(all_info_corrected)
View(all_info_corrected)
brizo_list|>
rename(snowball_id = `Snowball Map`) |>
mutate(snowball_id = as.character(snowball_id),  # Ensure snowball_id is a character
snowball_id = str_pad(snowball_id, width = 5, pad = "0"))-> brizo_list
all_info_corrected <- all_info %>%
group_by(Cuisines) |>
summarise(counts=n()) |>
# Split the Cuisines column into a list of cuisines
mutate(Cuisines = str_split(Cuisines, ";\\s*")) %>%
# Expand the dataframe so each cuisine in the list gets its own row
unnest(Cuisines)
View(all_info_corrected)
all_info_corrected <- all_info %>%
group_by(Cuisines) |>
summarise(counts=n()) |>
# Split the Cuisines column into a list of cuisines
mutate(Cuisines = str_split(Cuisines, ";\\s*"))
View(all_info_corrected)
all_info_corrected <- all_info %>%
group_by(Cuisines) |>
summarise(counts=n()) |>
# Split the 'Cuisines' column into a list of cuisines
mutate(Cuisines = str_split(Cuisines, ";\\s*"),
# Calculate the number of cuisines to determine how to split the count
NumCuisines = map_dbl(Cuisines, length)) %>%
# Calculate the count per cuisine by dividing the total count by the number of cuisines
rowwise() %>%
mutate(SplitCount = Count / NumCuisines) %>%
# Expand the data frame so each cuisine gets its own row, along with the evenly split count
unnest(Cuisines) %>%
# Now that we have one row per cuisine per original entry, drop the now unnecessary columns
select(-NumCuisines) %>%
# Group by the individual cuisines and sum up the split counts for the final total count per cuisine
group_by(Cuisines) %>%
summarize(TotalCount = sum(SplitCount)) %>%
ungroup()
all_info_corrected <- all_info %>%
group_by(Cuisines) |>
summarise(Counts=n()) |>
# Split the 'Cuisines' column into a list of cuisines
mutate(Cuisines = str_split(Cuisines, ";\\s*"),
# Calculate the number of cuisines to determine how to split the count
NumCuisines = map_dbl(Cuisines, length)) %>%
# Calculate the count per cuisine by dividing the total count by the number of cuisines
rowwise() %>%
mutate(SplitCount = Count / NumCuisines) %>%
# Expand the data frame so each cuisine gets its own row, along with the evenly split count
unnest(Cuisines) %>%
# Now that we have one row per cuisine per original entry, drop the now unnecessary columns
select(-NumCuisines) %>%
# Group by the individual cuisines and sum up the split counts for the final total count per cuisine
group_by(Cuisines) %>%
summarize(TotalCount = sum(SplitCount)) %>%
ungroup()
all_info_corrected <- all_info %>%
group_by(Cuisines) |>
summarise(Count=n()) |>
# Split the 'Cuisines' column into a list of cuisines
mutate(Cuisines = str_split(Cuisines, ";\\s*"),
# Calculate the number of cuisines to determine how to split the count
NumCuisines = map_dbl(Cuisines, length)) %>%
# Calculate the count per cuisine by dividing the total count by the number of cuisines
rowwise() %>%
mutate(SplitCount = Count / NumCuisines) %>%
# Expand the data frame so each cuisine gets its own row, along with the evenly split count
unnest(Cuisines) %>%
# Now that we have one row per cuisine per original entry, drop the now unnecessary columns
select(-NumCuisines) %>%
# Group by the individual cuisines and sum up the split counts for the final total count per cuisine
group_by(Cuisines) %>%
summarize(TotalCount = sum(SplitCount)) %>%
ungroup()
View(all_info_corrected)
all_info_corrected <- all_info %>%
group_by(Cuisines) |>
summarise(Count=n()) |>
# Split the 'Cuisines' column into a list of cuisines
mutate(Cuisines = str_split(Cuisines, ";\\s*"),
# Calculate the number of cuisines to determine how to split the count
NumCuisines = map_dbl(Cuisines, length)) %>%
# Calculate the count per cuisine by dividing the total count by the number of cuisines
rowwise() %>%
mutate(SplitCount = Count / NumCuisines) %>%
# Expand the data frame so each cuisine gets its own row, along with the evenly split count
unnest(Cuisines) %>%
# Now that we have one row per cuisine per original entry, drop the now unnecessary columns
select(-NumCuisines) %>%
# Group by the individual cuisines and sum up the split counts for the final total count per cuisine
group_by(Cuisines) %>%
summarize(TotalCount = sum(SplitCount)) %>%
ungroup() |>
round(TotalCount, digits = 2)
View(all_info_corrected)
all_info_corrected <- all_info %>%
group_by(Cuisines) |>
summarise(Count=n()) |>
# Split the 'Cuisines' column into a list of cuisines
mutate(Cuisines = str_split(Cuisines, ";\\s*"),
# Calculate the number of cuisines to determine how to split the count
NumCuisines = map_dbl(Cuisines, length)) %>%
# Calculate the count per cuisine by dividing the total count by the number of cuisines
rowwise() %>%
mutate(SplitCount = Count / NumCuisines) %>%
# Expand the data frame so each cuisine gets its own row, along with the evenly split count
unnest(Cuisines) %>%
# Now that we have one row per cuisine per original entry, drop the now unnecessary columns
select(-NumCuisines) %>%
# Group by the individual cuisines and sum up the split counts for the final total count per cuisine
group_by(Cuisines) %>%
summarize(TotalCount = sum(SplitCount)) %>%
ungroup() |>
round(TotalCount, digits = 3)
View(all_info)
View(all_info_corrected)
all_info_corrected <- all_info %>%
group_by(Cuisines) |>
summarise(Count=n()) |>
# Split the 'Cuisines' column into a list of cuisines
mutate(Cuisines = str_split(Cuisines, ";\\s*"),
# Calculate the number of cuisines to determine how to split the count
NumCuisines = map_dbl(Cuisines, length)) %>%
# Calculate the count per cuisine by dividing the total count by the number of cuisines
rowwise() %>%
mutate(SplitCount = Count / NumCuisines) %>%
# Expand the data frame so each cuisine gets its own row, along with the evenly split count
unnest(Cuisines) %>%
# Now that we have one row per cuisine per original entry, drop the now unnecessary columns
select(-NumCuisines) %>%
# Group by the individual cuisines and sum up the split counts for the final total count per cuisine
group_by(Cuisines) %>%
summarize(TotalCount = sum(SplitCount)) %>%
ungroup() |>
mutate(TotalCount=round(TotalCount, digits = 3))
View(all_info_corrected)
all_info_corrected <- all_info %>%
group_by(Cuisines) |>
summarise(Count=n()) |>
# Split the 'Cuisines' column into a list of cuisines
mutate(Cuisines = str_split(Cuisines, ";\\s*"),
# Calculate the number of cuisines to determine how to split the count
NumCuisines = map_dbl(Cuisines, length)) %>%
# Calculate the count per cuisine by dividing the total count by the number of cuisines
rowwise() %>%
mutate(SplitCount = Count / NumCuisines) %>%
# Expand the data frame so each cuisine gets its own row, along with the evenly split count
unnest(Cuisines) %>%
# Now that we have one row per cuisine per original entry, drop the now unnecessary columns
select(-NumCuisines) %>%
# Group by the individual cuisines and sum up the split counts for the final total count per cuisine
group_by(Cuisines) %>%
summarize(TotalCount = sum(SplitCount)) %>%
ungroup() |>
mutate(TotalCount=round(TotalCount, digits = 2))
View(all_info_corrected)
brizo_list <- read_csv("Clean-Data/brizo_list.csv",
col_types = cols(`Snowball Map` = col_character())) |>
rename(snowball_id = `Snowball Map`) |>
mutate(snowball_id = as.character(snowball_id),  # Ensure snowball_id is a character
snowball_id = str_pad(snowball_id, width = 5, pad = "0"))-> brizo_list
brizo_list <- read_csv("Clean-Data/brizo_list.csv",
col_types = cols(`Snowball Map` = col_character())) |>
rename(snowball_id = `Snowball Map`) |>
mutate(snowball_id = as.character(snowball_id),  # Ensure snowball_id is a character
snowball_id = str_pad(snowball_id, width = 5, pad = "0"))
form_fill_brizo <- december_form_fill |>
left_join(brizo_list, by = "snowball_id") |>
select(Cuisines,`Price Range`, snowball_id, Date, `Page location`, everything() )
december_form_fill <- read_csv("cuisines_type/december_form_fill.csv")
form_fill_brizo <- december_form_fill |>
left_join(brizo_list, by = "snowball_id") |>
select(Cuisines,`Price Range`, snowball_id, Date, `Page location`, everything() )
View(december_form_fill)
december_form_fill <- read_csv("cuisines_type/december_form_fill.csv") |>
rename(snowball_id = `Snowball`)
form_fill_brizo <- december_form_fill |>
left_join(brizo_list, by = "snowball_id") |>
select(Cuisines,`Price Range`, snowball_id, Date, `Page location`, everything() )
form_fill_brizo <- december_form_fill |>
left_join(brizo_list, by = "snowball_id") |>
select(cuisines,`Price Range`, snowball_id, Date, `Page location`, everything() )
form_fill_brizo <- december_form_fill |>
left_join(brizo_list, by = "snowball_id")
View(form_fill_brizo)
form_fill_brizo <- december_form_fill |>
left_join(brizo_list, by = "snowball_id") |>
rename(Cuisines_FormFill = Cuisines.x,
Cuisines_Brizo = Cuisines.y) |>
mutate(Cuisines = case_when(is.na(Cuisines_FormFill)~Cuisines_Brizo,
TRUE ~ Cuisines_FormFill)) |>
select(Cuisines,`Price Range`, snowball_id, Date, `Page location`, everything() )
View(form_fill_brizo)
form_fill_brizo <- december_form_fill |>
left_join(brizo_list, by = "snowball_id") |>
rename(Cuisines_FormFill = Cuisines.x,
Cuisines_Brizo = Cuisines.y,
Date = `Created Date`) |>
mutate(Cuisines = case_when(is.na(Cuisines_FormFill)~Cuisines_Brizo,
TRUE ~ Cuisines_FormFill)) |>
select(Cuisines,`Price Range`, snowball_id, Date, `Page location`, everything() )
View(form_fill_brizo)
form_fill_brizo <- december_form_fill |>
left_join(brizo_list, by = "snowball_id") |>
rename(Cuisines_FormFill = Cuisines.x,
Cuisines_Brizo = Cuisines.y,
Date = `Created Date`) |>
mutate(Cuisines = case_when(is.na(Cuisines_FormFill)~Cuisines_Brizo,
TRUE ~ Cuisines_FormFill)) |>
select(Cuisines,`Price Range`, snowball_id, Date, Referrer, everything() )
View(form_fill_brizo)
form_fill_brizo <- december_form_fill |>
left_join(brizo_list, by = "snowball_id") |>
filter(str_detect(Referrer,"(?i)brizous")) |>
rename(Cuisines_FormFill = Cuisines.x,
Cuisines_Brizo = Cuisines.y,
Date = `Created Date`) |>
mutate(Cuisines = case_when(is.na(Cuisines_FormFill)~Cuisines_Brizo,
TRUE ~ Cuisines_FormFill)) |>
select(Cuisines,`Price Range`, snowball_id, Date, Referrer, everything() )
View(form_fill_brizo)
form_fill_brizo <- december_form_fill |>
left_join(brizo_list, by = "snowball_id") |>
filter(str_detect(Referrer,"(?i)brizous")) |>
rename(Cuisines_FormFill = Cuisines.x,
Cuisines_Brizo = Cuisines.y,
Date = `Created Date`) |>
mutate(Cuisines = case_when(is.na(Cuisines_FormFill)~Cuisines_Brizo,
TRUE ~ Cuisines_FormFill)) |>
select(Cuisines,Cuisines_FormFill,Cuisines_Brizo, `Price Range`, snowball_id, Date, Referrer, everything() )
View(form_fill_brizo)
form_fill_brizo <- december_form_fill |>
left_join(brizo_list, by = "snowball_id")
View(form_fill_brizo)
View(form_fill_brizo)
form_fill_brizo <- december_form_fill |>
left_join(brizo_list, by = "snowball_id") |>
filter(str_detect(Referrer,"(?i)brizous")) |>
rename(Cuisines_FormFill = Cuisines.x,
Cuisines_Brizo = Cuisines.y,
Date = `Created Date`) |>
mutate(Cuisines = case_when(is.na(Cuisines_FormFill)~Cuisines_Brizo,
TRUE ~ Cuisines_FormFill)) |>
select(Cuisines,Cuisines_FormFill,Cuisines_Brizo, `Price Range`, snowball_id, Date, Referrer, everything() )
View(form_fill_brizo)
form_fill_all <- december_form_fill |>
left_join(brizo_list, by = "snowball_id") |>
rename(Cuisines_FormFill = Cuisines.x,
Cuisines_Brizo = Cuisines.y,
Date = `Created Date`) |>
mutate(Cuisines = case_when(is.na(Cuisines_FormFill)~Cuisines_Brizo,
TRUE ~ Cuisines_FormFill)) |>
select(Cuisines,Cuisines_FormFill,Cuisines_Brizo, `Price Range`, snowball_id, Date, Referrer, everything() )
form_fill_brizo <- december_form_fill |>
left_join(brizo_list, by = "snowball_id") |>
filter(str_detect(Referrer,"(?i)brizous")) |>
rename(Cuisines_FormFill = Cuisines.x,
Cuisines_Brizo = Cuisines.y,
Date = `Created Date`) |>
mutate(Cuisines = case_when(is.na(Cuisines_FormFill)~Cuisines_Brizo,
TRUE ~ Cuisines_FormFill)) |>
select(Cuisines,-Cuisines_FormFill,-Cuisines_Brizo, `Price Range`, snowball_id, Date, Referrer, everything())
|>write_csv("cuisine_type/form_fill_all.csv")
form_fill_all <- december_form_fill |>
left_join(brizo_list, by = "snowball_id") |>
rename(Cuisines_FormFill = Cuisines.x,
Cuisines_Brizo = Cuisines.y,
Date = `Created Date`) |>
mutate(Cuisines = case_when(is.na(Cuisines_FormFill)~Cuisines_Brizo,
TRUE ~ Cuisines_FormFill)) |>
select(Cuisines,Cuisines_FormFill,Cuisines_Brizo, `Price Range`, snowball_id, Date, Referrer, everything()) |>
write_csv("cuisine_type/form_fill_all.csv")
form_fill_all <- december_form_fill |>
left_join(brizo_list, by = "snowball_id") |>
rename(Cuisines_FormFill = Cuisines.x,
Cuisines_Brizo = Cuisines.y,
Date = `Created Date`) |>
mutate(Cuisines = case_when(is.na(Cuisines_FormFill)~Cuisines_Brizo,
TRUE ~ Cuisines_FormFill)) |>
select(Cuisines,Cuisines_FormFill,Cuisines_Brizo, `Price Range`, snowball_id, Date, Referrer, everything()) |>
write_csv("cuisines_type/form_fill_all.csv")
form_fill_brizo <- december_form_fill |>
left_join(brizo_list, by = "snowball_id") |>
filter(str_detect(Referrer,"(?i)brizous")) |>
rename(Cuisines_FormFill = Cuisines.x,
Cuisines_Brizo = Cuisines.y,
Date = `Created Date`) |>
mutate(Cuisines = case_when(is.na(Cuisines_FormFill)~Cuisines_Brizo,
TRUE ~ Cuisines_FormFill)) |>
select(Cuisines,-Cuisines_FormFill,-Cuisines_Brizo, `Price Range`, snowball_id, Date, Referrer, everything()) |>
write_csv("cuisines_type/form_fill_brizo.csv")
form_fill_brizo_info <- form_fill_brizo %>%
group_by(Cuisines) |>
summarise(Count=n()) |>
mutate(Cuisines = str_split(Cuisines, ";\\s*"),
NumCuisines = map_dbl(Cuisines, length)) %>%
rowwise() %>%
mutate(SplitCount = Count / NumCuisines) %>%
unnest(Cuisines) %>%
select(-NumCuisines) %>%
group_by(Cuisines) %>%
summarize(TotalCount = sum(SplitCount)) %>%
ungroup() |>
mutate(TotalCount=round(TotalCount, digits = 2))
View(form_fill_brizo_info)
form_fill_brizo_info <- form_fill_brizo %>%
group_by(Cuisines) |>
summarise(Count=n()) |>
mutate(Cuisines = str_split(Cuisines, ";\\s*"),
NumCuisines = map_dbl(Cuisines, length)) %>%
rowwise() %>%
mutate(SplitCount = Count / NumCuisines) %>%
unnest(Cuisines) %>%
select(-NumCuisines) %>%
group_by(Cuisines) %>%
summarize(TotalCount = sum(SplitCount)) %>%
ungroup() |>
mutate(TotalCount=round(TotalCount, digits = 2)) |>
write_csv("cuisine_type/form_fill_brizo_info.csv")
form_fill_brizo_info <- form_fill_brizo %>%
group_by(Cuisines) |>
summarise(Count=n()) |>
mutate(Cuisines = str_split(Cuisines, ";\\s*"),
NumCuisines = map_dbl(Cuisines, length)) %>%
rowwise() %>%
mutate(SplitCount = Count / NumCuisines) %>%
unnest(Cuisines) %>%
select(-NumCuisines) %>%
group_by(Cuisines) %>%
summarize(TotalCount = sum(SplitCount)) %>%
ungroup() |>
mutate(TotalCount=round(TotalCount, digits = 2)) |>
write_csv("cuisines_type/form_fill_brizo_info.csv")
form_fill_brizo_info <- form_fill_brizo %>%
group_by(Cuisines) |>
summarise(Count=n())
View(form_fill_brizo_info)
form_fill_brizo_info <- form_fill_brizo %>%
group_by(Cuisines) |>
summarise(Count=n()) |>
mutate(Cuisines = str_split(Cuisines, ";\\s*"),
NumCuisines = map_dbl(Cuisines, length)) %>%
rowwise() %>%
mutate(SplitCount = Count / NumCuisines) %>%
unnest(Cuisines) %>%
select(-NumCuisines) %>%
group_by(Cuisines) %>%
summarize(TotalCount = sum(SplitCount)) %>%
ungroup() |>
mutate(TotalCount=round(TotalCount, digits = 2)) |>
write_csv("cuisines_type/summary_table_form_fill_brizo.csv")
form_fill_brizo_info <- form_fill_brizo %>%
group_by(Cuisines) |>
summarise(Count=n()) |>
mutate(Cuisines = str_split(Cuisines, ";\\s*"),
NumCuisines = map_dbl(Cuisines, length)) %>%
rowwise() %>%
mutate(SplitCount = Count / NumCuisines) %>%
unnest(Cuisines) %>%
select(-NumCuisines) %>%
group_by(Cuisines) %>%
summarize(TotalCount = sum(SplitCount)) %>%
ungroup() |>
mutate(TotalCount=round(TotalCount, digits = 2))
View(form_fill_brizo_info)
all_info_corrected <- all_info %>%
group_by(Cuisines) |>
summarise(Count=n())
library(tidyverse)
brizo_list <- read_csv("Clean-Data/brizo_list.csv",
col_types = cols(`Snowball Map` = col_character())) |>
rename(snowball_id = `Snowball Map`) |>
mutate(snowball_id = as.character(snowball_id),  # Ensure snowball_id is a character
snowball_id = str_pad(snowball_id, width = 5, pad = "0"))
unique_scan <- read_csv("Clean-Data/unique_scan.csv") |>
filter(list_source == "Brizo")
all_info <- unique_scan |>
left_join(brizo_list, by = "snowball_id") |>
select(Cuisines,`Price Range`, snowball_id, Date, `Page location`, everything() )
# write_csv(all_info, "cuisines_type/qr_scan_w_brizo_info.csv", na = "")
all_info_corrected <- all_info %>%
group_by(Cuisines) |>
summarise(Count=n())
View(all_info_corrected)
form_fill_brizo_info <- form_fill_brizo %>%
group_by(Cuisines) |>
summarise(Count=n()) |>
mutate(Cuisines = str_split(Cuisines, ";\\s*"),
NumCuisines = map_dbl(Cuisines, length)) %>%
rowwise() %>%
mutate(SplitCount = Count / NumCuisines) %>%
unnest(Cuisines) %>%
select(-NumCuisines) %>%
group_by(Cuisines) %>%
summarize(TotalCount = sum(SplitCount)) %>%
ungroup() |>
mutate(TotalCount=round(TotalCount, digits = 2)) |>
write_csv("cuisines_type/summary_table_form_fill_brizo.csv", na = "")
form_fill_all <- december_form_fill |>
left_join(brizo_list, by = "snowball_id") |>
rename(Cuisines_FormFill = Cuisines.x,
Cuisines_Brizo = Cuisines.y,
Date = `Created Date`) |>
mutate(Cuisines = case_when(is.na(Cuisines_FormFill)~Cuisines_Brizo,
TRUE ~ Cuisines_FormFill)) |>
select(Cuisines,Cuisines_FormFill,Cuisines_Brizo, `Price Range`, snowball_id, Date, Referrer, everything()) |>
write_csv("cuisines_type/form_fill_all.csv", na="")
form_fill_brizo <- december_form_fill |>
left_join(brizo_list, by = "snowball_id") |>
filter(str_detect(Referrer,"(?i)brizous")) |>
rename(Cuisines_FormFill = Cuisines.x,
Cuisines_Brizo = Cuisines.y,
Date = `Created Date`) |>
mutate(Cuisines = case_when(is.na(Cuisines_FormFill)~Cuisines_Brizo,
TRUE ~ Cuisines_FormFill)) |>
select(Cuisines,-Cuisines_FormFill,-Cuisines_Brizo, `Price Range`, snowball_id, Date, Referrer, everything()) |>
write_csv("cuisines_type/form_fill_brizo.csv", na = "")
brizo_list <- read_csv("Clean-Data/brizo_list.csv")
brizo_list <- read_csv("Clean-Data/brizo_list.csv")
library(tidyverse)
brizo_list <- read_csv("Clean-Data/brizo_list.csv")
december_dm_lead <- read_csv("Clean-Data/december_dm_lead.csv")
brizo_list <- read_csv("Clean-Data/brizo_list.csv")
brizo_list |>
select(Phone, `Price Range`,State, Cuisines) -> price_range_matching
View(december_dm_lead)
december_dm_lead |>
left_join(price_range_matching, by = c("Mobile - Primary"=Phone))
december_dm_lead |>
left_join(price_range_matching, by = c("Mobile - Primary"="Phone"))
december_dm_lead |>
mutate(Phone = as.character(`Mobile - Primary`)) |>
left_join(price_range_matching, by = "Phone")
december_dm_lead |>
mutate(Phone = as.character(`Mobile - Primary`)) |>
drop_na(Phone) |>
left_join(price_range_matching, by = "Phone")
brizo_list |>
select(Phone, `Price Range`,State, Cuisines) |>
drop_na(Phone)-> price_range_matching
brizo_list <- read_csv("Clean-Data/brizo_list.csv")
brizo_list |>
select(Phone, `Price Range`,State, Cuisines) |>
drop_na(Phone)-> price_range_matching
december_dm_lead |>
mutate(Phone = as.character(`Mobile - Primary`)) |>
filter(is.na(Phone)) -> dm_lead_na
december_dm_lead |>
mutate(Phone = as.character(`Mobile - Primary`),
`Price Range`= "NA",
State = "NA",
Cuisines= "NA") |>
filter(is.na(Phone)) -> dm_lead_na
View(dm_lead_na)
View(december_dm_lead)
december_dm_lead |>
mutate(Phone = as.character(`Mobile - Primary`)) |>
drop_na(Phone) |>
left_join(price_range_matching, by = "Phone") -> matched_dm_lead
View(matched_dm_lead)
matched_dm = rbind(matched_dm_lead, dm_lead_na)
write_csv(matched_dm,"cuisines_type/december_dm_lead_brizo.csv")
matched_dm |>
select(flow, types, mql, sql, cw, `Price Range`. everything())-> matched_dm
matched_dm |>
select(flow, types, mql, sql, cw, `Price Range`, everything())-> matched_dm
write_csv(matched_dm,"cuisines_type/december_dm_lead_brizo.csv", na="")
